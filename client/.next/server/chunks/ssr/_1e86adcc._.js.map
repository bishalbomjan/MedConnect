{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/bomja/Desktop/medical/MedConnect/client/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/bomja/Desktop/medical/MedConnect/client/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/bomja/Desktop/medical/MedConnect/client/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,8JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/bomja/Desktop/medical/MedConnect/client/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAEA;;;AAEA,SAAS,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAsC;IACzE,qBACE,8OAAC;QACC,MAAM;QACN,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,mcACA,iFACA,0GACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/bomja/Desktop/medical/MedConnect/client/src/components/ui/label.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Label = registerClientReference(\n    function() { throw new Error(\"Attempted to call Label() from the server but Label is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/label.tsx <module evaluation>\",\n    \"Label\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,6DACA","debugId":null}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/bomja/Desktop/medical/MedConnect/client/src/components/ui/label.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Label = registerClientReference(\n    function() { throw new Error(\"Attempted to call Label() from the server but Label is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/label.tsx\",\n    \"Label\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,QAAQ,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,yCACA","debugId":null}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/bomja/Desktop/medical/MedConnect/client/src/components/ui/select.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Select = registerClientReference(\n    function() { throw new Error(\"Attempted to call Select() from the server but Select is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx <module evaluation>\",\n    \"Select\",\n);\nexport const SelectContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectContent() from the server but SelectContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx <module evaluation>\",\n    \"SelectContent\",\n);\nexport const SelectGroup = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectGroup() from the server but SelectGroup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx <module evaluation>\",\n    \"SelectGroup\",\n);\nexport const SelectItem = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectItem() from the server but SelectItem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx <module evaluation>\",\n    \"SelectItem\",\n);\nexport const SelectLabel = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectLabel() from the server but SelectLabel is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx <module evaluation>\",\n    \"SelectLabel\",\n);\nexport const SelectScrollDownButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectScrollDownButton() from the server but SelectScrollDownButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx <module evaluation>\",\n    \"SelectScrollDownButton\",\n);\nexport const SelectScrollUpButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectScrollUpButton() from the server but SelectScrollUpButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx <module evaluation>\",\n    \"SelectScrollUpButton\",\n);\nexport const SelectSeparator = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectSeparator() from the server but SelectSeparator is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx <module evaluation>\",\n    \"SelectSeparator\",\n);\nexport const SelectTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectTrigger() from the server but SelectTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx <module evaluation>\",\n    \"SelectTrigger\",\n);\nexport const SelectValue = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectValue() from the server but SelectValue is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx <module evaluation>\",\n    \"SelectValue\",\n);\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;AACO,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,8DACA;AAEG,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,8DACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,8DACA;AAEG,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,8DACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,8DACA;AAEG,MAAM,yBAAyB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxD;IAAa,MAAM,IAAI,MAAM;AAA4P,GACzR,8DACA;AAEG,MAAM,uBAAuB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtD;IAAa,MAAM,IAAI,MAAM;AAAwP,GACrR,8DACA;AAEG,MAAM,kBAAkB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,8DACA;AAEG,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,8DACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,8DACA","debugId":null}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/bomja/Desktop/medical/MedConnect/client/src/components/ui/select.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Select = registerClientReference(\n    function() { throw new Error(\"Attempted to call Select() from the server but Select is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx\",\n    \"Select\",\n);\nexport const SelectContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectContent() from the server but SelectContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx\",\n    \"SelectContent\",\n);\nexport const SelectGroup = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectGroup() from the server but SelectGroup is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx\",\n    \"SelectGroup\",\n);\nexport const SelectItem = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectItem() from the server but SelectItem is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx\",\n    \"SelectItem\",\n);\nexport const SelectLabel = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectLabel() from the server but SelectLabel is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx\",\n    \"SelectLabel\",\n);\nexport const SelectScrollDownButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectScrollDownButton() from the server but SelectScrollDownButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx\",\n    \"SelectScrollDownButton\",\n);\nexport const SelectScrollUpButton = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectScrollUpButton() from the server but SelectScrollUpButton is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx\",\n    \"SelectScrollUpButton\",\n);\nexport const SelectSeparator = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectSeparator() from the server but SelectSeparator is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx\",\n    \"SelectSeparator\",\n);\nexport const SelectTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectTrigger() from the server but SelectTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx\",\n    \"SelectTrigger\",\n);\nexport const SelectValue = registerClientReference(\n    function() { throw new Error(\"Attempted to call SelectValue() from the server but SelectValue is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/select.tsx\",\n    \"SelectValue\",\n);\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;AACO,MAAM,SAAS,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,0CACA;AAEG,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,0CACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,0CACA;AAEG,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,0CACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,0CACA;AAEG,MAAM,yBAAyB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACxD;IAAa,MAAM,IAAI,MAAM;AAA4P,GACzR,0CACA;AAEG,MAAM,uBAAuB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtD;IAAa,MAAM,IAAI,MAAM;AAAwP,GACrR,0CACA;AAEG,MAAM,kBAAkB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,0CACA;AAEG,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,0CACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,0CACA","debugId":null}},
    {"offset": {"line": 358, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/bomja/Desktop/medical/MedConnect/client/src/app/register/page.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { User, Mail, Phone, MapPin, Lock, Stethoscope } from 'lucide-react';\r\nimport { toast } from 'sonner';\r\n\r\n// Validation schema using Yup\r\nconst registerSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email('Please enter a valid email address')\r\n        .required('Email is required'),\r\n    role: Yup.string()\r\n        .oneOf(['patient', 'doctor'], 'Please select a valid role')\r\n        .required('Role is required'),\r\n    phoneNumber: Yup.string()\r\n        .matches(/^[+]?[\\d\\s\\-()]+$/, 'Please enter a valid phone number')\r\n        .min(10, 'Phone number must be at least 10 digits')\r\n        .required('Phone number is required'),\r\n    location: Yup.string()\r\n        .min(3, 'Location must be at least 3 characters')\r\n        .required('Location is required'),\r\n    password: Yup.string()\r\n        .min(8, 'Password must be at least 8 characters')\r\n        .matches(/(?=.*[a-z])/, 'Password must contain at least one lowercase letter')\r\n        .matches(/(?=.*[A-Z])/, 'Password must contain at least one uppercase letter')\r\n        .matches(/(?=.*\\d)/, 'Password must contain at least one number')\r\n        .required('Password is required'),\r\n    confirmPassword: Yup.string()\r\n        .oneOf([Yup.ref('password')], 'Passwords must match')\r\n        .required('Please confirm your password'),\r\n});\r\n\r\n// Initial form values\r\nconst initialValues = {\r\n    email: '',\r\n    role: '',\r\n    phoneNumber: '',\r\n    location: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n};\r\n\r\nconst Register = () => {\r\n\r\n\r\n    const handleSubmit = async (values: typeof initialValues, { setSubmitting }: any) => {\r\n        try {\r\n            // Simulate API call\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n            console.log('Registration data:', values);\r\n\r\n            toast({\r\n                title: 'Registration Successful!',\r\n                description: `Welcome to MedConnect! Your ${values.role} account has been created.`,\r\n            });\r\n\r\n            setSubmitting(false);\r\n        } catch (error) {\r\n            toast({\r\n                title: 'Registration Failed',\r\n                description: 'Something went wrong. Please try again.',\r\n                variant: 'destructive',\r\n            });\r\n            setSubmitting(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-white to-green-100 flex items-center justify-center p-4\">\r\n            <div className=\"w-full max-w-md\">\r\n                {/* Header */}\r\n                <div className=\"text-center mb-8 animate-fade-in\">\r\n                    <div className=\"flex items-center justify-center mb-4\">\r\n                        <div className=\"bg-green-400 p-3 rounded-full shadow-lg\">\r\n                            <Stethoscope className=\"h-8 w-8 text-white\" />\r\n                        </div>\r\n                    </div>\r\n                    <h1 className=\"text-3xl font-bold text-green-600 mb-2\">MedConnect</h1>\r\n                    <p className=\"text-gray-600\">Join our healthcare community</p>\r\n                </div>\r\n\r\n                {/* Registration Form */}\r\n                <Card className=\"shadow-xl border-green-200 bg-white backdrop-blur-sm animate-fade-in\">\r\n                    <CardHeader className=\"text-center pb-2\">\r\n                        <CardTitle className=\"text-2xl text-green-600\">Create Account</CardTitle>\r\n                        <CardDescription className=\"text-gray-600\">Enter your details to get started</CardDescription>\r\n                    </CardHeader>\r\n\r\n                    <CardContent>\r\n                        <Formik\r\n                            initialValues={initialValues}\r\n                            validationSchema={registerSchema}\r\n                            onSubmit={handleSubmit}\r\n                        >\r\n                            {({ isSubmitting, setFieldValue, values, errors, touched }) => (\r\n                                <Form className=\"space-y-4\">\r\n                                    {/* Email Field */}\r\n                                    <div className=\"space-y-2\">\r\n                                        <Label htmlFor=\"email\" className=\"text-sm font-medium text-green-700\">\r\n                                            <Mail className=\"inline h-4 w-4 mr-1\" />\r\n                                            Email Address\r\n                                        </Label>\r\n                                        <Field\r\n                                            as={Input}\r\n                                            id=\"email\"\r\n                                            name=\"email\"\r\n                                            type=\"email\"\r\n                                            placeholder=\"Enter your email\"\r\n                                            className=\"transition-all duration-200 focus:ring-2 focus:ring-green-300 focus:border-green-400 border-green-200\"\r\n                                        />\r\n                                        <ErrorMessage name=\"email\" component=\"div\" className=\"text-red-500 text-sm\" />\r\n                                    </div>\r\n\r\n                                    {/* Role Field */}\r\n                                    <div className=\"space-y-2\">\r\n                                        <Label htmlFor=\"role\" className=\"text-sm font-medium text-green-700\">\r\n                                            <User className=\"inline h-4 w-4 mr-1\" />\r\n                                            Role\r\n                                        </Label>\r\n                                        <Select onValueChange={(value) => setFieldValue('role', value)}>\r\n                                            <SelectTrigger className=\"focus:ring-2 focus:ring-green-300 focus:border-green-400 border-green-200\">\r\n                                                <SelectValue placeholder=\"Select your role\" />\r\n                                            </SelectTrigger>\r\n                                            <SelectContent>\r\n                                                <SelectItem value=\"patient\">Patient</SelectItem>\r\n                                                <SelectItem value=\"doctor\">Doctor</SelectItem>\r\n                                            </SelectContent>\r\n                                        </Select>\r\n                                        <ErrorMessage name=\"role\" component=\"div\" className=\"text-red-500 text-sm\" />\r\n                                    </div>\r\n\r\n                                    {/* Phone Number Field */}\r\n                                    <div className=\"space-y-2\">\r\n                                        <Label htmlFor=\"phoneNumber\" className=\"text-sm font-medium text-green-700\">\r\n                                            <Phone className=\"inline h-4 w-4 mr-1\" />\r\n                                            Phone Number\r\n                                        </Label>\r\n                                        <Field\r\n                                            as={Input}\r\n                                            id=\"phoneNumber\"\r\n                                            name=\"phoneNumber\"\r\n                                            type=\"tel\"\r\n                                            placeholder=\"Enter your phone number\"\r\n                                            className=\"transition-all duration-200 focus:ring-2 focus:ring-green-300 focus:border-green-400 border-green-200\"\r\n                                        />\r\n                                        <ErrorMessage name=\"phoneNumber\" component=\"div\" className=\"text-red-500 text-sm\" />\r\n                                    </div>\r\n\r\n                                    {/* Location Field */}\r\n                                    <div className=\"space-y-2\">\r\n                                        <Label htmlFor=\"location\" className=\"text-sm font-medium text-green-700\">\r\n                                            <MapPin className=\"inline h-4 w-4 mr-1\" />\r\n                                            Location\r\n                                        </Label>\r\n                                        <Field\r\n                                            as={Input}\r\n                                            id=\"location\"\r\n                                            name=\"location\"\r\n                                            type=\"text\"\r\n                                            placeholder=\"Enter your location\"\r\n                                            className=\"transition-all duration-200 focus:ring-2 focus:ring-green-300 focus:border-green-400 border-green-200\"\r\n                                        />\r\n                                        <ErrorMessage name=\"location\" component=\"div\" className=\"text-red-500 text-sm\" />\r\n                                    </div>\r\n\r\n                                    {/* Password Field */}\r\n                                    <div className=\"space-y-2\">\r\n                                        <Label htmlFor=\"password\" className=\"text-sm font-medium text-green-700\">\r\n                                            <Lock className=\"inline h-4 w-4 mr-1\" />\r\n                                            Password\r\n                                        </Label>\r\n                                        <Field\r\n                                            as={Input}\r\n                                            id=\"password\"\r\n                                            name=\"password\"\r\n                                            type=\"password\"\r\n                                            placeholder=\"Create a strong password\"\r\n                                            className=\"transition-all duration-200 focus:ring-2 focus:ring-green-300 focus:border-green-400 border-green-200\"\r\n                                        />\r\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"text-red-500 text-sm\" />\r\n                                    </div>\r\n\r\n                                    {/* Confirm Password Field */}\r\n                                    <div className=\"space-y-2\">\r\n                                        <Label htmlFor=\"confirmPassword\" className=\"text-sm font-medium text-green-700\">\r\n                                            <Lock className=\"inline h-4 w-4 mr-1\" />\r\n                                            Confirm Password\r\n                                        </Label>\r\n                                        <Field\r\n                                            as={Input}\r\n                                            id=\"confirmPassword\"\r\n                                            name=\"confirmPassword\"\r\n                                            type=\"password\"\r\n                                            placeholder=\"Confirm your password\"\r\n                                            className=\"transition-all duration-200 focus:ring-2 focus:ring-green-300 focus:border-green-400 border-green-200\"\r\n                                        />\r\n                                        <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"text-red-500 text-sm\" />\r\n                                    </div>\r\n\r\n                                    {/* Submit Button */}\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        disabled={isSubmitting}\r\n                                        className=\"w-full bg-green-500 hover:bg-green-600 text-white transition-all duration-200 transform hover:scale-[1.02] active:scale-[0.98] shadow-lg\"\r\n                                    >\r\n                                        {isSubmitting ? 'Creating Account...' : 'Create Account'}\r\n                                    </Button>\r\n\r\n                                    {/* Sign In Link */}\r\n                                    <div className=\"text-center mt-6\">\r\n                                        <p className=\"text-sm text-gray-600\">\r\n                                            Already have an account?{' '}\r\n                                            <a\r\n                                                href=\"/login\"\r\n                                                className=\"text-green-600 hover:text-green-700 font-medium transition-colors duration-200\"\r\n                                            >\r\n                                                Sign in here\r\n                                            </a>\r\n                                        </p>\r\n                                    </div>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </CardContent>\r\n                </Card>\r\n\r\n                {/* Footer */}\r\n                <div className=\"text-center mt-8 animate-fade-in\">\r\n                    <p className=\"text-sm text-gray-600\">\r\n                        By creating an account, you agree to our Terms of Service and Privacy Policy\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;"],"names":[],"mappings":"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","debugId":null}}]
}